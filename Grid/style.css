@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Roboto", sans-serif;
    min-height: 100vh;
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    grid-template-rows: 50px auto 50px;
    grid-template-areas:
        /* header..... */
        "hd hd hd hd hd hd hd hd hd"
        /* main ..... aside.. */
        "mn mn mn mn mn mn mn sb sb"
        /* footer..... */
        "ft ft ft ft ft ft ft ft ft";

    gap: 0.5rem;
}

.el {
    background-color: rebeccapurple;
    color: #fff;
    display: grid;
    place-content: center;
}

.header {
    grid-area: hd;
}

.sidebar {
    grid-area: sb;
    background-color: blue;
}

.footer {
    grid-area: ft;
}

.container {
    display: grid;
    /* container is the main part */
    grid-area: mn;
    /* 
    automatically make grid PREFER NOT TO USE
    grid-auto-flow: column; 

     specifies, as a space-separated track list, the line names and track sizing functions of the grid. 
     Columns widths 
    when specifing 2 values means 2 columns 
    when specifing 3 values means 3 columns
     
    grid-template-columns: 200px 200px;
     
    instead of using absolute values use fraction values which are used espacially for grids 
    
    grid-template-columns: 2fr 1fr 3fr; 
    
     we can also mix absolute values and fraction values like: 200px 1fr 2fr 
     if we have more columns of same width USE: 

    This means repeat 1fr width 4 times;
    grid-template-columns: repeat(4, 1fr);

    This means repeat 2fr 1fr width 2 times, means 2fr 1fr 2fr 2fr
    */
    grid-template-columns: repeat(2, 2fr 1fr);
    /* Set rows height to be 200px */
    grid-auto-rows: 200px;
    /* BUT we can also use minmax()
    Defines a size range greater than or equal to min and less than or equal to max. */
    /* we can use auto or specific value also */
    grid-auto-rows: minmax(150px, auto);
    /* Gives gap b/w rows */
    row-gap: 1rem;
    /* Gives gap b/w columns */
    column-gap: 1rem;

    /* we can use gap which combine both row and column gap */
    gap: 1rem;
    /* 1rem for rows and 0.5rem for columns */
    gap: 1rem 0.5rem;

}

.box {
    background-color: #000;
    color: #fff;
    font-size: 2rem;
    padding: 0.5rem;

}

.box:first-child {
    background-color: blue;
    /* These numbers are grid-lines 
    1: first grid line which is touching the screen left-most */
    grid-column-start: 1;
    /* Ends when grid-line is 4 */
    grid-column-end: 4;

    /* INSTEAD OF USING DIFFERENTLY, COMBINE THEM */
    /*     
    grid-column: 1 / 4;
     */
    /* SIMILAR FOR ROWS */
    grid-row-start: 1;
    grid-row-end: 3;

    /* INSTEAD OF USING DIFFERENTLY, COMBINE THEM */
    /*     
    grid-column: 1 / 3;
     */

    /* Now similar with FLEX, we have align-content, for this, also declare display:grid */
    display: grid;
    /*
    align-content: center;
    justify-content: center; 
    */

    /* INSTEAD of using both things differently USE */
    /* If we write just one thing, it will be assign to both */
    place-content: end center;
    /* ALIGN-CONTENT  JUSTIFY-CONTENT */
}

.box:nth-child(2) {
    background-color: fuchsia;
    grid-column: 1/5;
    /* When writing for row, 3 and 4th grid shift up instead of below 2, because, by default grid is calculating implicitly where is the space and put there which we don't explicitly tell it do */
    grid-row: 3/4;
}

/* https://cssgridgarden.com/ */